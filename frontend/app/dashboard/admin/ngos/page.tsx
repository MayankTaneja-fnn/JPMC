"use client"

import { useState, useEffect } from "react"
import { DashboardLayout } from "@/components/dashboard-layout"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Search, Plus, Eye, FileText } from "lucide-react"
import { useLanguage } from "@/components/language-provider"
import jsPDF from "jspdf"

interface NGO {
  id: number
  name: string
  country: string
  adminEmail: string
  phoneNumber: string
  activeStudents: number
  teachers: number
  registrationDate: string
  status: string
}

export default function ManageNGOsPage() {
  const { t, isRTL } = useLanguage()
  const [searchTerm, setSearchTerm] = useState("")
  const [ngos, setNgos] = useState<NGO[]>([])
  const [selectedNGO, setSelectedNGO] = useState<NGO | null>(null)
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false)
  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)

  const [newNGO, setNewNGO] = useState({
    name: "",
    country: "",
    adminEmail: "",
    phoneNumber: "",
  })

  const countries = [
    "Afghanistan",
    "Algeria",
    "Bahrain",
    "Bangladesh",
    "Egypt",
    "India",
    "Indonesia",
    "Iraq",
    "Jordan",
    "Kuwait",
    "Lebanon",
    "Malaysia",
    "Morocco",
    "Pakistan",
    "Palestine",
    "Qatar",
    "Saudi Arabia",
    "Syria",
    "Tunisia",
    "Turkey",
    "UAE",
    "Yemen",
  ]

  useEffect(() => {
    // Load NGOs from localStorage
    const storedNGOs = JSON.parse(localStorage.getItem("ngos") || "[]")
    setNgos(storedNGOs)
  }, [])

  const filteredNGOs = ngos.filter(
    (ngo) =>
      ngo.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      ngo.country.toLowerCase().includes(searchTerm.toLowerCase()),
  )

  const handleAddNGO = () => {
    const ngoData: NGO = {
      id: Date.now(),
      name: newNGO.name,
      country: newNGO.country,
      adminEmail: newNGO.adminEmail,
      phoneNumber: newNGO.phoneNumber,
      activeStudents: Math.floor(Math.random() * 100),
      teachers: Math.floor(Math.random() * 10) + 1,
      registrationDate: new Date().toISOString(),
      status: "active",
    }

    const updatedNGOs = [...ngos, ngoData]
    setNgos(updatedNGOs)
    localStorage.setItem("ngos", JSON.stringify(updatedNGOs))

    setNewNGO({ name: "", country: "", adminEmail: "", phoneNumber: "" })
    setIsAddDialogOpen(false)
  }

  const generateReport = () => {
    const doc = new jsPDF()

    // Header
    doc.setFontSize(20)
    doc.text("NGO Platform Report", 20, 30)

    // Date
    doc.setFontSize(12)
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 45)

    // Summary
    doc.setFontSize(16)
    doc.text("Summary", 20, 65)

    doc.setFontSize(12)
    doc.text(`Total NGOs: ${ngos.length}`, 20, 80)
    doc.text(`Total Students: ${ngos.reduce((sum, ngo) => sum + ngo.activeStudents, 0)}`, 20, 95)
    doc.text(`Total Teachers: ${ngos.reduce((sum, ngo) => sum + ngo.teachers, 0)}`, 20, 110)

    // NGO Details
    doc.setFontSize(16)
    doc.text("NGO Details", 20, 135)

    let yPosition = 150
    doc.setFontSize(10)

    ngos.forEach((ngo, index) => {
      if (yPosition > 270) {
        doc.addPage()
        yPosition = 20
      }

      doc.text(`${index + 1}. ${ngo.name}`, 20, yPosition)
      doc.text(`Country: ${ngo.country}`, 30, yPosition + 10)
      doc.text(`Students: ${ngo.activeStudents}`, 30, yPosition + 20)
      doc.text(`Teachers: ${ngo.teachers}`, 30, yPosition + 30)

      yPosition += 45
    })

    // Footer
    doc.setFontSize(8)
    doc.text("Generated by Vruksh Ekatra Platform", 20, 285)

    doc.save("ngo-report.pdf")
  }

  return (
    <DashboardLayout role="admin">
      <div className={`space-y-6 ${isRTL ? "rtl" : "ltr"}`}>
        {/* Header */}
        <div className={`flex items-center justify-between ${isRTL ? "flex-row-reverse" : ""}`}>
          <div className={isRTL ? "text-right" : ""}>
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white">{t("admin.manageNgos")}</h2>
            <p className="text-gray-600 dark:text-gray-300">Manage registered NGOs and their information</p>
          </div>
          <div className={`flex space-x-2 ${isRTL ? "space-x-reverse" : ""}`}>
            <Button
              onClick={generateReport}
              variant="outline"
              className="border-[#94B6EF] text-[#94B6EF] hover:bg-[#94B6EF] hover:text-white"
            >
              <FileText className={`h-4 w-4 ${isRTL ? "ml-2" : "mr-2"}`} />
              {t("admin.generateReport")}
            </Button>
            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
              <DialogTrigger asChild>
                <Button className="bg-[#213E60] hover:bg-[#213E60]/90 text-white">
                  <Plus className={`h-4 w-4 ${isRTL ? "ml-2" : "mr-2"}`} />
                  Add NGO
                </Button>
              </DialogTrigger>
              <DialogContent className={isRTL ? "rtl" : "ltr"}>
                <DialogHeader>
                  <DialogTitle>Add New NGO</DialogTitle>
                  <DialogDescription>Register a new NGO partner to the platform</DialogDescription>
                </DialogHeader>
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="ngoName">NGO Name</Label>
                    <Input
                      id="ngoName"
                      value={newNGO.name}
                      onChange={(e) => setNewNGO((prev) => ({ ...prev, name: e.target.value }))}
                      placeholder="Enter NGO name"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="country">Country</Label>
                    <Select
                      value={newNGO.country}
                      onValueChange={(value) => setNewNGO((prev) => ({ ...prev, country: value }))}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select country" />
                      </SelectTrigger>
                      <SelectContent>
                        {countries.map((country) => (
                          <SelectItem key={country} value={country}>
                            {country}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="adminEmail">Admin Email</Label>
                    <Input
                      id="adminEmail"
                      type="email"
                      value={newNGO.adminEmail}
                      onChange={(e) => setNewNGO((prev) => ({ ...prev, adminEmail: e.target.value }))}
                      placeholder="admin@ngo.org"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="phoneNumber">Phone Number</Label>
                    <Input
                      id="phoneNumber"
                      value={newNGO.phoneNumber}
                      onChange={(e) => setNewNGO((prev) => ({ ...prev, phoneNumber: e.target.value }))}
                      placeholder="+1 234 567 8900"
                    />
                  </div>
                  <Button onClick={handleAddNGO} className="w-full bg-[#213E60] hover:bg-[#213E60]/90 text-white">
                    Add NGO
                  </Button>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        </div>

        {/* NGO Management */}
        <Card>
          <CardHeader>
            <CardTitle>Registered NGOs</CardTitle>
            <CardDescription>Overview of all NGO partners on the platform</CardDescription>
          </CardHeader>
          <CardContent>
            <div className={`flex items-center space-x-2 mb-4 ${isRTL ? "space-x-reverse" : ""}`}>
              <div className="relative flex-1">
                <Search
                  className={`absolute ${isRTL ? "right-3" : "left-3"} top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4`}
                />
                <Input
                  placeholder="Search NGOs..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className={isRTL ? "pr-10" : "pl-10"}
                />
              </div>
            </div>

            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className={isRTL ? "text-right" : ""}>NGO Name</TableHead>
                    <TableHead className={isRTL ? "text-right" : ""}>Country</TableHead>
                    <TableHead className={isRTL ? "text-right" : ""}>Active Students</TableHead>
                    <TableHead className={isRTL ? "text-right" : ""}>Teachers</TableHead>
                    <TableHead className={isRTL ? "text-right" : ""}>Status</TableHead>
                    <TableHead className={isRTL ? "text-right" : ""}>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredNGOs.map((ngo) => (
                    <TableRow key={ngo.id}>
                      <TableCell className={`font-medium ${isRTL ? "text-right" : ""}`}>{ngo.name}</TableCell>
                      <TableCell className={isRTL ? "text-right" : ""}>{ngo.country}</TableCell>
                      <TableCell className={isRTL ? "text-right" : ""}>
                        <Badge variant="outline">{ngo.activeStudents}</Badge>
                      </TableCell>
                      <TableCell className={isRTL ? "text-right" : ""}>
                        <Badge variant="outline">{ngo.teachers}</Badge>
                      </TableCell>
                      <TableCell className={isRTL ? "text-right" : ""}>
                        <Badge variant={ngo.status === "active" ? "default" : "secondary"}>{ngo.status}</Badge>
                      </TableCell>
                      <TableCell className={isRTL ? "text-right" : ""}>
                        <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>
                          <DialogTrigger asChild>
                            <Button variant="ghost" size="sm" onClick={() => setSelectedNGO(ngo)}>
                              <Eye className="h-4 w-4" />
                            </Button>
                          </DialogTrigger>
                          <DialogContent className={isRTL ? "rtl" : "ltr"}>
                            <DialogHeader>
                              <DialogTitle>NGO Details</DialogTitle>
                              <DialogDescription>Detailed information about the NGO</DialogDescription>
                            </DialogHeader>
                            {selectedNGO && (
                              <div className="space-y-4">
                                <div className="grid grid-cols-2 gap-4">
                                  <div>
                                    <Label>NGO Name</Label>
                                    <p className="font-medium">{selectedNGO.name}</p>
                                  </div>
                                  <div>
                                    <Label>Country</Label>
                                    <p className="font-medium">{selectedNGO.country}</p>
                                  </div>
                                  <div>
                                    <Label>Admin Email</Label>
                                    <p className="font-medium">{selectedNGO.adminEmail}</p>
                                  </div>
                                  <div>
                                    <Label>Phone Number</Label>
                                    <p className="font-medium">{selectedNGO.phoneNumber}</p>
                                  </div>
                                  <div>
                                    <Label>Active Students</Label>
                                    <p className="font-medium">{selectedNGO.activeStudents}</p>
                                  </div>
                                  <div>
                                    <Label>Teachers</Label>
                                    <p className="font-medium">{selectedNGO.teachers}</p>
                                  </div>
                                  <div>
                                    <Label>Registration Date</Label>
                                    <p className="font-medium">
                                      {new Date(selectedNGO.registrationDate).toLocaleDateString()}
                                    </p>
                                  </div>
                                  <div>
                                    <Label>Status</Label>
                                    <Badge variant={selectedNGO.status === "active" ? "default" : "secondary"}>
                                      {selectedNGO.status}
                                    </Badge>
                                  </div>
                                </div>
                              </div>
                            )}
                          </DialogContent>
                        </Dialog>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>
      </div>
    </DashboardLayout>
  )
}
